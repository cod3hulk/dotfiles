"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Packages
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" Bundles for colors
Plug 'tomasr/molokai'

" Bundles for snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Autocomplete
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

" Bundles for navigation
Plug 'kien/ctrlp.vim'

" Bundles for editing support
Plug 'tpope/vim-surround'
Plug 'Raimondi/delimitMate'

" Bundle for statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Bundle for fast navigation
Plug 'Lokaltog/vim-easymotion'

" Syntax checking
Plug 'scrooloose/syntastic'

" Simple execution of ruby test files
Plug 'skalnik/vim-vroom', { 'for': 'ruby' }

" Support for silver-searcher
Plug 'rking/ag.vim'

" Support for git
Plug 'tpope/vim-fugitive'

" Support for js
Plug 'marijnh/tern_for_vim', { 'for': 'javascript', 'do': 'npm install' }

" Support for autoclosing tags
Plug 'vim-scripts/HTML-AutoCloseTag'

" Support for golang
Plug 'fatih/vim-go', { 'for': 'go' }

" Support for the UNIX shell commands
Plug 'tpope/vim-eunuch'

" Support for editing markdown files
Plug 'suan/vim-instant-markdown', { 'for': 'markdown', 'do': 'npm -g install instant-markdown-d' }

" Support fo scala
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

" Support for gradle
Plug 'tfnico/vim-gradle'

" Support for csv
Plug 'chrisbra/csv.vim'

" Support for drawing ascii graphics
Plug 'vim-scripts/DrawIt'

Plug 'tpope/vim-unimpaired'

" IDE like file nav
Plug 'scrooloose/nerdtree'

" Fix vim tmux focus problem
Plug 'tmux-plugins/vim-tmux-focus-events'

" Easy uncomment/comment
Plug 'scrooloose/nerdcommenter'

call plug#end()

set nocompatible
filetype off
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" general config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set autowrite
set noswapfile

" set autowrite
set autowrite

" Set default encoding
set encoding=utf-8

" Set how many lines of history VIM has to remember
set history=700

" Set relative line number
set relativenumber

" Set to auto read when a file is changed from the outside
set autoread

" Paste yanked text to global clipboard
set clipboard=unnamed

" Always show current position
set ruler

" Set offset lines when moving cursor
set so=10

" Enable wild menu
set wildmenu

" Ignore compiled files from wildmenu
set wildignore=*/target/*

" set wildmode
set wildmode=longest,list

" Height of the command bar
set cmdheight=1

" Ignore case when searching
set ignorecase

" Enable smart case or searching
set smartcase

" Higlight search results
set hlsearch

" Incremental search
set incsearch

" Turn on magic for regular expressions
set magic

" Show matching brackets
set showmatch

" disable search wrap around the end of file
"set nows

" gvim settings
if has("gui_running")
    " remove menu bar
    set guioptions-=m

    " remove toolbar
    set guioptions-=T

    " remove right-hand scroll bar
    set guioptions-=r

    " remove left-hand scroll bar
    set guioptions-=L

    " maximize gvim window.
    set lines=999 columns=999
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set color theme for gvim only
if has("gui_running")
    let g:molokai_original = 1
    colorscheme molokai
else
    set t_Co=256
    set background=dark
    colorscheme molokai
    let g:molokai_original = 1
endif

" Set font size
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Inconsolata\ 11
    elseif has("gui_macvim")
        set guifont=Menlo\ Regular:h14
    elseif has("gui_win32")
        set guifont=Consolas:h11:cANSI
    endif
endif

" Enable syntax highlighting
syntax enable

" Set file format handling
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and ident related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Using spaces instead of tabs
set expandtab

" Enable smart tabs
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

" Enable auto indent
set autoindent

" Enable smart indent
set smartindent

" Enable wrap lines
set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" remove higlight for search results
nmap <cr> :nohlsearch<cr>

" Fast saving
nmap <leader>w :update<cr>

" Fast quitting
nmap <leader>q :q<cr>

" Fast saving and quitting
nmap <leader>x :x<cr>

" Fast visual mode
imap jj <Esc>

" make command
map <leader>b :make<cr>

" Toggle NERDTree
map <leader>t :NERDTreeToggle<cr>

" Toggle paste Mode
set pastetoggle=<F2>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Always show status line
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrlp config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map=''
let g:ctrlp_macth_window='bottom,order:btt,min:1,max:10'
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_reversed=0
map <leader>f :CtrlP<CR>
map <leader>o :CtrlPBufTag<CR>
map <leader>e :CtrlPBuffer<CR>
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40

" ctrlp ignores
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn|settings|project)$',
            \ 'file': '\v\.(exe|so|dll|class)$',
            \ }

" ctrlp cache directory
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'

" ctrlp use silver_searcher for fuzzy searchh
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    set grepprg=ag\ --nogroup\ --nocolor
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file type specific configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup ruby_config
    autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
    autocmd FileType ruby,eruby,yaml setlocal path+=lib
    autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80
    " execute current ruby script
    autocmd FileType ruby set makeprg=ruby\ -cw\ %
    " execute ri for the the word under the cursor
    autocmd FileType ruby nmap <leader>h :!ri <cword><cr>
augroup END

augroup go_config
    au Filetype go nnoremap <leader>r :GoRun<CR>
    au Filetype go nnoremap <leader>t :GoTest<CR>
augroup END

augroup bash_config
    autocmd FileType sh set makeprg=%:p
augroup END

augroup javascript_config
    autocmd FileType javascript set makeprg=node\ %
    autocmd FileType javascript setlocal ai sw=2 sts=2 et
    com! FormatJSON %!python -m json.tool
augroup END

augroup html_config
    autocmd FileType html let b:syntastic_mode="passive"
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" youcomplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_key_list_select_completion = ['<C-j>']
let g:ycm_key_list_previous_completion = ['<C-k>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SuperTab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:SuperTabDefaultCompletionType = '<C-n>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_section_b = '%{getcwd()}'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" delimitMate
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:delimitMate_expand_space = 1
let g:delimitMate_expand_cr = 2
let g:delimitMate_smart_quotes = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :NERDTreeToggle<cr>

au FileType xhtml,xml so ~/.vim/plugged/HTML-AutoCloseTag/ftplugin/html_autoclosetag.vim
